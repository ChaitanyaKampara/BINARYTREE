

Input: root = [1,2,3,4,5,6,7]

Output: [[1],[2,3],[4,5,6,7]]









# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        res = []
        q = deque()
        if root:
            q.append(root)
# using BFS , storing values in QUEUE and retriving in lists ---> O(n)
# introducing queue = collections.dequeue 
# until q be empty code will run (while)
# 
        while q:
            val=[]
            for i in range(len(q)):
                node = q.popleft()
                val.append(node.val)
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
            res.append(val)
        return res



        
