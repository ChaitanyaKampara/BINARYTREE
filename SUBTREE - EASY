Input: root = [1,2,3,4,5], subRoot = [2,4,5]

Output: true


class Solution:   
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        if not subRoot:   # if subroot is null
            return True
        if not root:      # if main root is empty then what to compare so it is false
            return False
        if self.sameTree(root,subRoot): # if samtree function satisfies return true
            return True
        return self.isSubtree(root.left, subRoot) or self.isSubtree(root.right, subRoot)
    def sameTree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        if not root and not subRoot:
            return False
        if root and subRoot and root.val == subRoot.val:
            return self.sameTree(root.left,subRoot.left) and self.sameTree(root.right,subRoot.right)
        
        return False
