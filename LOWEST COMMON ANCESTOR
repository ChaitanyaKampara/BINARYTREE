
Input: root = [5,3,8,1,4,7,9,null,2], p = 3, q = 8

Output: 5

        5
       / \
      3   8
     / \ / \
    1  4 7  9
     \
      2

EXPLANTION : for 3,8 common least ancestor is 5

# they will give 2 nodes we  find the commen lowest root  -------O(n)
# root is commen ancestor to all nodes , start with root node current = root
# if p is in LEFT subtree and q is in RIGHT subtree then root is lca
# if root == p or q ------------> lca =7

class Solution:
    def lowestCommonAncestor(self, root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode:
        while True:
            if root.val < p.val and root.val < q.val:
                root = root.right
            elif root.val > p.val and root.val > q.val:
                root = root.left
            else:
                return root
